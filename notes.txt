Design Patterns : common solutions to common design problems
Creational Design Patterns: How, when and where objects should be created
Singleton DP: Only one instance of a particular class should exist ever
    when do we require only instance of a class
    -- Logger, DB connection
    -- The classes which share resources at the end
    -- Classes which doesn't have state
 // intuition
        how you will created a new obj in java
        -- hide the constructor, make it private
        so, you won't be able to create even one instance
        -- create a static method which creates and returns a obj
        still a new instance will be created whenever we call the method
        -- write a logic in the method and return only one existing object
        In multithreaded env it can create multiple instances
        -- make the method synchronized or create obj during app load time
        when we deserialize it will create as many instance as we want and that will break
        this singleton design pattern
        -- use enums
        -- In java, enums are complete classes, they can have methods, variables etc

  ---------------------------------------------------
  Builder Design Pattern:
  usecase
    1.A class containing lot of attributes
    2.Few of the attributes are mandatory
    3.Objects should be immutable
  Approaches:
    1.Create an object using constructor and set values using setter
        - we might miss to assign values to mandatory fields
        - violating immutability concept
    2.Initialize attributes using constructor
        - we will end up creating lot of constructors
        - Abc(String name, String city) is same as Abc(String state, String country)
    3.Initialize mandatory attributes using constructor and optional via setters
        - violates immutability
        - lot of constructors based on combination of attributes we are initializing
    4.Pass a hashmap to constructor
        - what will K,V in hashMap
        - possible typo in K
        - how client will get to know names of keys
        Positives
           - Solves immutability

    5.HashMap holds same variables as the actual class, we can have a helper/builder class
    which contains same variables as the actual class, this will help in avoiding type casting
    issue and is similar as hashMap which contains key-Value, where keys are like variables of
    actual class.

    steps:
    1.Have a static inner class inside actual class with same attributes
    2.Setters in inner class
    3.validation in inner class
    4.build method


        


    